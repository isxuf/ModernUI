[
  {
    "Id": "1112938",
    "ThreadId": "463875",
    "Html": "Validation error tooltip  is not synchronizing with user control's navigation animation.<br />\nThis is appearing only loading the login view. <br />\n<br />\nHow I can solve this ???<br />\n",
    "PostedDate": "2013-10-28T02:21:43.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1113343",
    "ThreadId": "463875",
    "Html": "Ok I did solve the problem. First I added a Property (DoValidate) my viewmodel and then I create a EventToCommand interaction trigger under the my nickname textbox<br />\nthen I gave TextChanged event to EventToCommand. The  DoValiateCommand triggered then IDataErrorInfo's property indexer worked like a charm :-)<br />\n<pre><code>public class LoginViewModel : ViewModelBase , IDataErrorInfo\n    {\n        private readonly ISession _session;\n        private string _nickName;\n        private string _password;\n        private bool _isEnableButton;\n        private bool _doValidate;\n\n        public LoginViewModel(ISession session)\n        {\n            _session = session;\n            LoginCommand = new RelayCommand(Login);\n            DoValidateCommand = new RelayCommand(() =&gt;\n            {\n                DoValidate = true;\n            });\n            DoValidate = false;\n        }\n        \n        __//I just added this property and my problem gone to far away__\n        public bool DoValidate\n        {\n            get { return _doValidate; }\n            set\n            {\n                _doValidate = value; \n                RaisePropertyChanged(() =&gt; DoValidate);\n            }\n        }\n\n        public string NickName\n        {\n            get { return _nickName; }\n            set\n            {\n                _nickName = value;\n                RaisePropertyChanged(() =&gt; NickName);\n               \n            }\n        }\n\n        public string Password\n        {\n            get { return _password; }\n            set\n            {\n                _password = value;\n                RaisePropertyChanged(() =&gt; Password);\n            }\n        }\n\n        private void Login()\n        {\n            var user = _session.QueryOver&lt;User&gt;()\n                .Where(x =&gt; x.NickName == this.NickName &amp;&amp; x.Password == Password)\n                .SingleOrDefault();\n            if (user != null)\n                MessengerInstance.Send(new NavigationMessage&lt;User&gt;(&quot;/Pages/Home.xaml&quot;, user));\n            else\n                MessengerInstance.Send(new NavigationMessage(&quot;/Pages/Settings.xaml&quot;));\n        }\n\n        public ICommand LoginCommand { get; set; }\n\n        public bool IsEnableButton\n        {\n            get { return _isEnableButton; }\n            set\n            {\n                _isEnableButton = value; \n                RaisePropertyChanged(() =&gt; IsEnableButton);\n            }\n        }\n\n        public string this[string columnName]\n        {\n            get\n            {\n                if (!DoValidate) return null;\n                if (columnName == &quot;NickName&quot;)\n                {\n                    if (string.IsNullOrEmpty(NickName))\n                        return &quot;Kullanıcı adı boş bırakılamaz.&quot;;\n                }\n                if (columnName == &quot;Password&quot;)\n                {\n                    if (string.IsNullOrEmpty(Password))\n                        return &quot;Lütfen şifrenizi giriniz.&quot;;\n                }\n                return string.Empty; \n            }\n        }\n\n        public string Error { get; private set; }\n\n        public ICommand DoValidateCommand\n        {\n            get;\n            set;\n        }\n    }</code></pre>\n\nThis is the LoginView<br />\n<pre><code>&lt;UserControl x:Class=&quot;EMDEPOS.Modern.Login.LoginView&quot;\n             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; \n             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n             xmlns:modern=&quot;clr-namespace:EMDEPOS.Modern&quot;\n             xmlns:cnvrter =&quot;clr-namespace:EMDEPOS.Modern.Converters&quot;\n             xmlns:i=&quot;http://schemas.microsoft.com/expression/2010/interactivity&quot;\n             xmlns:command=&quot;http://www.galasoft.ch/mvvmlight&quot;\n             mc:Ignorable=&quot;d&quot; \n             d:DesignHeight=&quot;400&quot; d:DesignWidth=&quot;400&quot;\n             DataContext=&quot;{Binding Login, Source={StaticResource Locator}}&quot;&gt;\n&lt;UserControl.Resources&gt;\n        &lt;ResourceDictionary&gt;\n            &lt;Style x:Key=&quot;ValiationStyle&quot; TargetType=&quot;{x:Type Control}&quot;&gt;\n            &lt;Setter Property=&quot;Validation.ErrorTemplate&quot;&gt;\n                &lt;Setter.Value&gt;\n                    &lt;ControlTemplate&gt;\n                        &lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n                            &lt;Border BorderThickness=&quot;1&quot; BorderBrush=&quot;Red&quot; VerticalAlignment=&quot;Top&quot;&gt;\n                                &lt;Grid&gt;\n                                    &lt;AdornedElementPlaceholder x:Name=&quot;adorner&quot; Margin=&quot;-1&quot;/&gt;\n                                &lt;/Grid&gt;\n                            &lt;/Border&gt;\n                            &lt;Border x:Name=&quot;errorBorder&quot; Background=&quot;Red&quot; Margin=&quot;8,0,0,0&quot; CornerRadius=&quot;0&quot;\n                            IsHitTestVisible=&quot;False&quot;&gt;\n                                &lt;TextBlock Text=&quot;{Binding Path=ErrorContent}&quot; \n                                Foreground=&quot;White&quot; FontFamily=&quot;Segoe UI&quot; Margin=&quot;8,2,8,3&quot; TextWrapping=&quot;Wrap&quot; VerticalAlignment=&quot;Center&quot;/&gt;\n                            &lt;/Border&gt;\n                        &lt;/StackPanel&gt;\n                    &lt;/ControlTemplate&gt;\n                &lt;/Setter.Value&gt;\n            &lt;/Setter&gt;\n        &lt;/Style&gt;\n            &lt;cnvrter:MultiBoolToVisibilityConverter x:Key=&quot;MultiBoolToVisibilityConverter&quot;&gt;&lt;/cnvrter:MultiBoolToVisibilityConverter&gt;\n        &lt;/ResourceDictionary&gt;\n    &lt;/UserControl.Resources&gt;\n    &lt;Grid Style=&quot;{StaticResource ContentRoot}&quot;&gt;\n        &lt;Canvas Margin=&quot;70,70,70,70&quot; Width=&quot;200&quot; Height=&quot;200&quot; \n                HorizontalAlignment=&quot;Center&quot;\n                VerticalAlignment=&quot;Center&quot;&gt;\n            &lt;Label Content=&quot;Kullanıcı Adı:&quot; Width=&quot;181&quot; HorizontalAlignment=&quot;Center&quot; \n                   VerticalAlignment=&quot;Center&quot; Canvas.Left=&quot;9&quot;/&gt;\n            &lt;TextBox x:Name=&quot;txtNickName&quot; \n                     Text=&quot;{Binding NickName, Mode=TwoWay, ValidatesOnDataErrors=True}&quot;\n                     Height=&quot;23&quot; TextWrapping=&quot;Wrap&quot; Canvas.Top=&quot;16&quot; Width=&quot;180&quot;\n                     HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; \n                     Canvas.Left=&quot;10&quot;\n                    Style=&quot;{StaticResource ValiationStyle}&quot;&gt;\n                &lt;i:Interaction.Triggers&gt;\n                    &lt;i:EventTrigger EventName=&quot;TextChanged&quot;&gt;\n                        &lt;command:EventToCommand Command=&quot;{Binding DoValidateCommand, Mode=TwoWay}&quot;&gt;&lt;/command:EventToCommand&gt;\n                    &lt;/i:EventTrigger&gt;\n                &lt;/i:Interaction.Triggers&gt;\n            &lt;/TextBox&gt;\n            &lt;Label Content=&quot;Şifre:&quot; Canvas.Top=&quot;39&quot; HorizontalAlignment=&quot;Center&quot;\n                   VerticalAlignment=&quot;Center&quot; Canvas.Left=&quot;9&quot; Width=&quot;181&quot;/&gt;\n            &lt;PasswordBox x:Name=&quot;txtPassword&quot; modern:PasswordHelper.Attach =&quot;True&quot;\n                         modern:PasswordHelper.Password=&quot;{Binding Password, Mode=TwoWay, ValidatesOnDataErrors=True}&quot;\n                         Canvas.Top=&quot;55&quot; Width=&quot;180&quot; HorizontalAlignment=&quot;Center&quot; \n                         VerticalAlignment=&quot;Center&quot; Canvas.Left=&quot;10&quot; Height=&quot;22&quot;\n                         Style=&quot;{StaticResource ValiationStyle}&quot;&gt;\n                &lt;i:Interaction.Triggers&gt;\n                    &lt;i:EventTrigger EventName=&quot;PasswordChanged&quot;&gt;\n                        &lt;command:EventToCommand Command=&quot;{Binding DoValidateCommand, Mode=TwoWay}&quot;&gt;&lt;/command:EventToCommand&gt;\n                    &lt;/i:EventTrigger&gt;\n                &lt;/i:Interaction.Triggers&gt;\n            &lt;/PasswordBox&gt;\n            &lt;Button Content=&quot;Giriş&quot; Command=&quot;{Binding LoginCommand}&quot; HorizontalAlignment=&quot;Left&quot; \n                    VerticalAlignment=&quot;Top&quot; Width=&quot;75&quot; Canvas.Left=&quot;115&quot; Canvas.Top=&quot;82&quot;&gt;\n                &lt;Button.IsEnabled&gt;\n                    &lt;MultiBinding Converter=&quot;{StaticResource MultiBoolToVisibilityConverter }&quot;&gt;\n                        &lt;Binding ElementName=&quot;txtNickName&quot; Path=&quot;(Validation.HasError)&quot;&gt;&lt;/Binding&gt;\n                        &lt;Binding ElementName=&quot;txtPassword&quot; Path=&quot;(Validation.HasError)&quot;&gt;&lt;/Binding&gt;\n                    &lt;/MultiBinding&gt;\n                &lt;/Button.IsEnabled&gt;\n            &lt;/Button&gt;\n        &lt;/Canvas&gt;\n    &lt;/Grid&gt;\n&lt;/UserControl&gt;</code></pre>\n\n",
    "PostedDate": "2013-10-28T12:51:42.727-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]