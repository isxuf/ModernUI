[
  {
    "Id": "1026334",
    "ThreadId": "439306",
    "Html": "Scenario:\r<br />\nThe user will input a 'value' in a textbox, then click a button. This will close the current window, open another window and populate a textbox with the 'value'.\r<br />\n<br />\nAny suggestions. Thanks.<br />\n",
    "PostedDate": "2013-04-05T14:23:24.093-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1026513",
    "ThreadId": "439306",
    "Html": "This is a general WPF question. Check this post on stackoverflow -&gt; <a href=\"http://stackoverflow.com/questions/2796470/wpf-create-a-dialog-prompt/2796487#2796487\" rel=\"nofollow\">http://stackoverflow.com/questions/2796470/wpf-create-a-dialog-prompt/2796487#2796487</a>.\r<br />\n<br />\nI suggest you put your textbox in a ModernDialog derived control.<br />\n",
    "PostedDate": "2013-04-06T04:30:24.447-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1067934",
    "ThreadId": "439306",
    "Html": "Hi Kozw,\r<br />\n<br />\nI've had a look at your suggested solution and it just doesn't work within Modern UI. Neither does a textbox in a moderndialog solve the problem. \r<br />\nI would like to use Delegates, which works fine in WPF, to pass data from a pop-up window back to the calling window.\r<br />\n<br />\nHere is my current code, but I've had to revert to a standard WPF Window and this defeats the purpose of the look-n-feel of ModernUI.\r<br />\n<br />\nPage 1, is a UserControl with a textbox and a button. This is a USERCONTROL.\r<br />\nPage 2, is a Window with a textbox and a button. This is a WINDOW and is where the problem lies, it should be a  USERCONTROL in ModernUI format, but I digress.\r<br />\n<br />\nPage 1 - codebehind<br />\n<pre><code>  private void btnGetCustName_Click(object sender, RoutedEventArgs e)\n    {\n        UserControl1 f = new UserControl1();\n        f.AddressUpdated += new UserControl1.AddressUpdateHandler(AddressForm_ButtonClicked);\n        f.ShowDialog();\n    }\n    private void AddressForm_ButtonClicked(object sender, AddressUpdateEventArgs e)\n    {\n        // update this form's value from the event args on dialog control\n        txtName.Text = e.CustName;\n    }</code></pre>\n\nPage 2 - codebehind<br />\n<pre><code>   public delegate void AddressUpdateHandler(object sender, AddressUpdateEventArgs e);\n    public event AddressUpdateHandler AddressUpdated;\n\n    public UserControl1()\n    {\n        InitializeComponent();     \n    }\n    private void btnOK_Click(object sender, RoutedEventArgs e)\n    {\n        string sCustName = txtCustName.Text;\n        AddressUpdateEventArgs args = new AddressUpdateEventArgs(sCustName);\n        AddressUpdated(this, args);\n        this.Close();\n    }\n}  \npublic class AddressUpdateEventArgs : System.EventArgs\n{\n    private string mCustName;\n    public AddressUpdateEventArgs(string sCustName)\n    {\n        this.mCustName = sCustName;          \n    }\n    public string CustName\n    {\n        get\n        {\n            return mCustName;\n        }\n    }  \n}  \n</code></pre>\n\nAs I said, this works fine if the Page 2 (UserControl1) is a WPF window - but I want it to be a ModernUI Dialog or at least look like it.\r<br />\n<br />\nIf, I change Page 2 (UserControl1) to be a USERCONTROL, then I cant pass this command - \r<br />\nf.AddressUpdated += new UserControl1.AddressUpdateHandler(AddressForm_ButtonClicked); \r<br />\nto the dialog as it gives an error message on f.showdialog() saying that UserControl1 (Page2) does not contain a definition for ShowDialog...\r<br />\n<br />\nIf, I change the load button action to be like a normal moderndialog load - \r<br />\n ModernDialog MyDiag = new ModernDialog();<br />\n<pre><code>        MyDiag.Title = &quot;Name Search&quot;;\n        MyDiag.Content = new UserControl1();\n        MyDiag.ShowDialog();\n</code></pre>\n\nthen, how do I pass the delegate handler - AddressUpdated += new UserControl1.AddressUpdateHandler(AddressForm_ButtonClicked); \r<br />\nto the dialog?\r<br />\n<br />\nBasically, I'm thinking that Delegates wont work with a ModernDialog - is this the case?\r<br />\n<br />\nThanks.<br />\n",
    "PostedDate": "2013-07-13T14:48:00.827-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1067966",
    "ThreadId": "439306",
    "Html": "Here's what I did for Window1 (your Page2).  Window 1 was just a WPF Window I changed the class and namespace on it.<br />\n<pre><code>&lt;mui:ModernDialog x:Class=&quot;Window1&quot;\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n    xmlns:mui=&quot;http://firstfloorsoftware.com/ModernUI&quot;\n    Title=&quot;Window1&quot; Height=&quot;300&quot; Width=&quot;300&quot;&gt;\n    &lt;Grid&gt;\n        &lt;!-- Whatever content here --&gt;\n        &lt;TextBox Name=&quot;txtCustName&quot; Height=&quot;33&quot; TextWrapping=&quot;Wrap&quot; Text=&quot;{Binding Value}&quot; VerticalAlignment=&quot;Top&quot; Margin=&quot;25,52,28,0&quot;/&gt;\n        &lt;Button Name=&quot;btnOK&quot; Content=&quot;_OK&quot; Margin=&quot;0,90,28,0&quot; VerticalAlignment=&quot;Top&quot; HorizontalAlignment=&quot;Right&quot; Width=&quot;64&quot;  /&gt;\n    &lt;/Grid&gt;\n&lt;/mui:ModernDialog&gt;\n\nPublic Class Window1\n    Public Delegate Sub AddressUpdateHandler(sender As Object, e As AddressUpdateEventArgs)\n    Public Event AddressUpdated As AddressUpdateHandler\n\n    Private Sub btnOK_Click(sender As Object, e As RoutedEventArgs) Handles btnOK.Click\n        Dim sCustName = txtCustName.Text\n        Dim args As New AddressUpdateEventArgs(sCustName)\n        RaiseEvent AddressUpdated(Me, args)\n        DialogResult = True\n        Close()\n    End Sub\nEnd Class</code></pre>\n\nHere was the usercontrol that was loaded into the MainWindow, Page1)<br />\n<pre><code>&lt;UserControl x:Class=&quot;Page1&quot;\n             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; \n             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; \n             mc:Ignorable=&quot;d&quot; \n             d:DesignHeight=&quot;300&quot; d:DesignWidth=&quot;300&quot;&gt;\n    &lt;Grid&gt;\n        &lt;TextBlock Name=&quot;txtName&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;22,27,0,0&quot; TextWrapping=&quot;Wrap&quot; Text=&quot;TextBlock&quot; VerticalAlignment=&quot;Top&quot;/&gt;\n        &lt;Button Content=&quot;Get Customer Name&quot; Name=&quot;btnGetCustName&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;76,146,0,0&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;146&quot;/&gt;\n    &lt;/Grid&gt;\n&lt;/UserControl&gt;\n\nPublic Class Page1\n    Private Sub btnGetCustName_Click(sender As Object, e As RoutedEventArgs) Handles btnGetCustName.Click\n        Dim f As New Window1\n        f.Buttons = Nothing ' Clear default buttons\n        AddHandler f.AddressUpdated, AddressOf AddressUpdateHandler\n        f.ShowDialog()\n        ' If you want to Show\n        'f.Owner = Nothing\n        'f.Show()\n    End Sub\n    Private Sub AddressUpdateHandler(sender As Object, e As AddressUpdateEventArgs)\n        txtName.Text = e.CustName\n    End Sub\nEnd Class\n</code></pre>\n\n",
    "PostedDate": "2013-07-13T19:07:46.743-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1067980",
    "ThreadId": "439306",
    "Html": "Finally....! \r<br />\nThe penny has dropped......\r<br />\nThank You Larry.....\r<br />\n<br />\nMy problem was that I was pushing a UserControl as content into a ModernDialog. \r<br />\n<br />\nIt wasn't until your example showed that I just should have been opening up a ModernDialog in the first place.......hours/days/months of coming back to this problem, testing, etc.....wow, that was frustrating, I think I just had the idea in my head that I just HAD to push a UserControl into the ModernDialog template because of how other ModernUI UserControls are dealt with....\r<br />\n<br />\nHanyway....\r<br />\n<br />\nSo my solution (with thanks to Larry) is:-\r<br />\nPage 1 - as my original example\r<br />\nPage 2 - make it a ModernDialog (you fool !!!!)\r<br />\n<br />\nHave I said thanks Larry, well I will again, a thousand thanks and please have a beer on me (if you partake, that is).\r<br />\n<br />\nMany, many thanks....\r<br />\nTheo... ;-)<br />\n",
    "PostedDate": "2013-07-13T21:53:38.53-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1068016",
    "ThreadId": "439306",
    "Html": "That's great but you can also have a usercontrol in the ModernDialog as content also.<br />\n<pre><code>Public Class Page1\n    Private Sub btnGetCustName_Click(sender As Object, e As RoutedEventArgs) Handles btnGetCustName.Click\n        Dim f As New Window1\n        f.Buttons = Nothing ' Clear default buttons\n        Dim uc = New Page2\n        f.Content = uc\n        AddHandler uc.AddressUpdated, AddressOf AddressUpdateHandler\n        f.ShowDialog()\n        ' If you want to Show\n        'f.Owner = Nothing\n        'f.Show()\n    End Sub\n    Private Sub AddressUpdateHandler(sender As Object, e As AddressUpdateEventArgs)\n        txtName.Text = e.CustName\n    End Sub\nEnd Class\n</code></pre>\n\nThe code that would have gone in the window now goes in the UserControl.  The only real difference is that you have to get the window the usercontrol is hosted in to set the dialog result and close.<br />\n<pre><code>Public Class Page2\n    Public Delegate Sub AddressUpdateHandler(sender As Object, e As AddressUpdateEventArgs)\n    Public Event AddressUpdated As AddressUpdateHandler\n\n    Private Sub btnOK_Click(sender As Object, e As RoutedEventArgs) Handles btnOK.Click\n        Dim sCustName = txtCustName.Text\n        Dim args As New AddressUpdateEventArgs(sCustName)\n        RaiseEvent AddressUpdated(Me, args)\n        Dim parent = Window.GetWindow(Me)\n        parent.DialogResult = True\n        parent.Close()\n    End Sub\nEnd Class\n</code></pre>\n\nhth.<br />\n",
    "PostedDate": "2013-07-14T02:12:40.127-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]