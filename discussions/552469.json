[
  {
    "Id": "1275230",
    "ThreadId": "552469",
    "Html": "Hello all, \r<br />\n<br />\nI'm  trying to use mui with the Windsor Castle DI container to inject my viewmodels into mui pages. I figured out a solution which works but I'm not at all sure if this is the way it is supposed to be done. Here is what I did: \r<br />\n<br />\nIn App.xaml.cs I wire up a mapping between the UI Pages and the corresponding viewmodels in the container:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n  <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> App : Application\n    {\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> OnStartup(StartupEventArgs e)\n        {\n            <span style=\"color:Blue;\">base</span>.OnStartup(e);\n\n            <span style=\"color:Blue;\">var</span> container = <span style=\"color:Blue;\">new</span> WindsorContainer();\n\n            <span style=\"color:Green;\">// Wire up viewmodels, models etc </span>\n            <span style=\"color:Green;\">// </span>\n            <span style=\"color:Green;\">// container.Register....</span>\n            <span style=\"color:Green;\">// ToDo ....</span>\n            <span style=\"color:Green;\">// ToDo ....</span>\n            \n            \n            <span style=\"color:Green;\">// Map Views to Viewmodels</span>\n            container.Register(Component.For&lt;Page1&gt;().ImplementedBy(<span style=\"color:Blue;\">typeof</span>(Page1_Viewmodel)));\n            container.Register(Component.For&lt;Page2&gt;().ImplementedBy(<span style=\"color:Blue;\">typeof</span>(Page2_Viewmodel)));\n            \n            Resources.Add(<span style=\"color:#A31515;\">&quot;My_MUI_Castle_Contentloader&quot;</span>, <span style=\"color:Blue;\">new</span> My_MUI_Castle_Contentloader(container));\n\n            <span style=\"color:Blue;\">var</span> MainWin = <span style=\"color:Blue;\">new</span> MainWindow();\n            MainWin.Show();\n        }\n    }\n\r\n</pre></div>I pass the Windsor container to a custom ContentLoader where I resolve the viewmodels and inject them to the corresponding page. <br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> My_MUI_Castle_Contentloader : DefaultContentLoader\n    {\n        <span style=\"color:Blue;\">public</span> My_MUI_Castle_Contentloader(IWindsorContainer container)\n        {\n            <span style=\"color:Blue;\">this</span>.container = container;\n        }\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">readonly</span> IWindsorContainer container;\n\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">object</span> LoadContent(Uri uri)\n        {\n            <span style=\"color:Blue;\">var</span> content = <span style=\"color:Blue;\">base</span>.LoadContent(uri);\n\n            <span style=\"color:Blue;\">var</span> page = content <span style=\"color:Blue;\">as</span> FrameworkElement; \n            <span style=\"color:Blue;\">if</span> (page != <span style=\"color:Blue;\">null</span>)\n            {                \n                page.DataContext = container.Resolve(page.GetType());\n            }\n            <span style=\"color:Blue;\">return</span> content;\n        }\n    }\r\n</pre></div>The ContentLoader is then used by MainWindow to load the pages. \r<br />\n<br />\nThe code does what it is supposed to do but I think that passing the container around is not the correct way to implement a DI Container. \r<br />\n<br />\nAny better idea for implementing Dependency Injection with mui? \r<br />\n<br />\nThanks a lot \r<br />\nLutz<br />\n",
    "PostedDate": "2014-07-22T12:25:05.76-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1275241",
    "ThreadId": "552469",
    "Html": "What you are doing is exactly the same I tried at first, the only difference was, that I was using Unity container. In my opinion, the default mui way is good for small projects. If projects are larger, the mui styles and templates are still great, but its navigation may need some tweaks. I already had the full journey you are obviously starting right now. I am not sure, if it fits your needs, but you can find my latest sample (MUI, Unity and PRISM) as well as related discussion <a href=\"https://mui.codeplex.com/discussions/456422\" rel=\"nofollow\">here</a>.<br />\n",
    "PostedDate": "2014-07-22T12:48:35.703-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1275683",
    "ThreadId": "552469",
    "Html": "Thanks for sharing your code. I had a look at it but I have to admit that your solution is some orders of magnitude too complex for me to understand. As you already mentioned I'm just starting this interesting 'dependency injection journey'. Thus,  I currently try to keep things as simple as possible until I become more fluent in the pattern.<br />\n<br />\nHere a (hopefully) improved approach to the problem of injecting viewmodels to m:ui Pages: <br />\nInstead of passing the DI container to the content loader I now inject a list of all registered viewmodels (identified by the marker interface &quot;IPageViewmodel&quot;) to it. Afterwards I map the Pages to the corresponding viewmodels and inject the content loader to the main window. <br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n  <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">partial</span> <span style=\"color:Blue;\">class</span> App : Application\n    {\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> OnStartup(StartupEventArgs e)\n        {\n            <span style=\"color:Blue;\">base</span>.OnStartup(e);\n\n            <span style=\"color:Blue;\">var</span> container = <span style=\"color:Blue;\">new</span> WindsorContainer();\n            container.Kernel.Resolver.AddSubResolver(<span style=\"color:Blue;\">new</span> CollectionResolver(container.Kernel,<span style=\"color:Blue;\">true</span>));\n                        \n            <span style=\"color:Green;\">// Wire up viewmodels, models etc </span>\n            <span style=\"color:Green;\">// </span>\n            <span style=\"color:Green;\">// container.Register....</span>\n            <span style=\"color:Green;\">// ToDo ....</span>\n                     \n            <span style=\"color:Green;\">// Register all Page Viewmodels identified by the marker interface &quot;IPageViewmodel&quot;</span>\n            container.Register(Classes.FromAssemblyContaining&lt;IPageViewmodel&gt;().BasedOn&lt;IPageViewmodel&gt;().WithServiceBase());\n\n            <span style=\"color:Green;\">// Register the Custom Contentloader            </span>\n            container.Register(Component.For&lt;My_MUI_Castle_Contentloader&gt;());\n\n            <span style=\"color:Green;\">// The loader depends on IEnumerable&lt;IPageViewmodel&gt;</span>\n            <span style=\"color:Green;\">// -&gt; this call will resolve all registered viewmodels</span>\n            <span style=\"color:Blue;\">var</span> ContentLoader = container.Resolve&lt;My_MUI_Castle_Contentloader&gt;(); \n            \n            <span style=\"color:Green;\">// Define the mapping betwen pages and corresponding viewmodels</span>\n            ContentLoader.Map&lt;Page1, IPage1Viewmodel&gt;();\n            ContentLoader.Map&lt;Page2, IPage2Viewmodel&gt;(); \n\n            <span style=\"color:Blue;\">new</span> MainWindow(ContentLoader).Show();                        \n        }\n    }\r\n</pre></div>Custom Content Loader: <br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> My_MUI_Castle_Contentloader : DefaultContentLoader\n    {\n        <span style=\"color:Blue;\">public</span> My_MUI_Castle_Contentloader(IEnumerable&lt;IPageViewmodel&gt; viewmodels)\n        {\n            <span style=\"color:Blue;\">this</span>.Viewmodels = viewmodels;\n        }\n\n        <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">void</span> Map&lt;Page, Viewmodel&gt;()\n        {\n            Mapper.Add(<span style=\"color:Blue;\">typeof</span>(Page), Viewmodels.OfType&lt;Viewmodel&gt;().First());\n        }\n\n        <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">object</span> LoadContent(Uri uri)\n        {\n            <span style=\"color:Blue;\">var</span> content = <span style=\"color:Blue;\">base</span>.LoadContent(uri);\n\n            <span style=\"color:Blue;\">var</span> Page = content <span style=\"color:Blue;\">as</span> FrameworkElement;\n            <span style=\"color:Blue;\">if</span> (Page != <span style=\"color:Blue;\">null</span>)\n            {                \n                Page.DataContext = Mapper[Page.GetType()];\n            }\n            <span style=\"color:Blue;\">return</span> content; \n        }\n\n        <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">readonly</span> IEnumerable&lt;IPageViewmodel&gt; Viewmodels;\n        <span style=\"color:Blue;\">private</span> Dictionary&lt;Type, <span style=\"color:Blue;\">object</span>&gt; Mapper = <span style=\"color:Blue;\">new</span> Dictionary&lt;Type, <span style=\"color:Blue;\">object</span>&gt;();\n    }\r\n</pre></div>I'd be happy for any feedback and improvement ideas.<br />\n",
    "PostedDate": "2014-07-23T13:51:02.72-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]