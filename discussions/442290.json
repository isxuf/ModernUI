[
  {
    "Id": "1038368",
    "ThreadId": "442290",
    "Html": "Hi,\r<br />\nFirst of all I want to say: 'Great Job!!! Thanks a lot'\r<br />\n<br />\nMy question is: is it ToggleButton in the library or should I create my own? If it's not there will it be included soon or later?\r<br />\n<br />\nThanks.<br />\n",
    "PostedDate": "2013-05-01T21:19:37.937-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1038518",
    "ThreadId": "442290",
    "Html": "A ToggleButton is not included, feel free to create an issue for it in the issue tracker<br />\n",
    "PostedDate": "2013-05-02T05:46:32.457-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1063787",
    "ThreadId": "442290",
    "Html": "Hello, poborin, did you have sucess in creating the custom ToggleButton style? I'm very interested in it, I've tried to do it by my own but it seems to require to create a .cs file with the .xaml for the DependecyProperties for the icon and it's size. I've been struggling all day but I can't figure out how to do it. Could you give me a piece of advice? Thanks!<br />\n",
    "PostedDate": "2013-07-02T13:17:45.183-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1063864",
    "ThreadId": "442290",
    "Html": "Hi everytimer,\r<br />\n<br />\nI've end up with no ToggleButton in my current UI design, so I don't have a cooked solution, but it's a quite a straight forward task. Let me show you an example:<br />\n<ul>\n<li>Create a .cs file with DependecyProperties, in my case it was a:</li>\n</ul>\n<pre><code>public class ResizebleModernButton : ModernButton\n    {\n        public static readonly DependencyProperty RadiusProperty =\n            DependencyProperty.Register(&quot;Radius&quot;, typeof(double), typeof(ResizebleModernButton));\n\n        public double Radius\n        {\n            get { return (double)GetValue(RadiusProperty); }\n            set { SetValue(RadiusProperty, value); }\n        }\n\n        static ResizebleModernButton()\n        {\n            DefaultStyleKeyProperty.OverrideMetadata(typeof(ResizebleModernButton), new FrameworkPropertyMetadata(typeof(ToggleTile)));\n        }\n    }</code></pre>\n\nBe sure that it based on <strong>ToggleButton</strong> instead of <strong>ModernButton</strong>. In your case you can be interested in some other properties, such an image, title etc.<br />\n<ul>\n<li>Then create a .xaml file to apply styles such as</li>\n</ul>\n<pre><code>&lt;ResourceDictionary xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n                    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n                    xmlns:controls=&quot;http://firstfloorsoftware.com/ModernUI&quot;\n                    xmlns:converter=&quot;clr-namespace:YourNamespace.Converters&quot;\n                    xmlns:local=&quot;clr-namespace:YourNamespace.CustomControls&quot;\n                    xmlns:sys=&quot;clr-namespace:System;assembly=mscorlib&quot;&gt;\n\n    &lt;ResourceDictionary.MergedDictionaries&gt;\n        &lt;ResourceDictionary Source=&quot;/FirstFloor.ModernUI;component/Assets/Converters.xaml&quot; /&gt;\n        &lt;ResourceDictionary&gt;\n            &lt;converter:ResizebleEllipseStrokeThicknessConverter x:Key=&quot;StrokeThicknessConverter&quot; /&gt;\n            &lt;converter:ResizebleModernButtonIconConverter x:Key=&quot;IconSizeConverter&quot; /&gt;\n            &lt;converter:StringNullOrEmptyToVisibilityConverter x:Key=&quot;StringToVisibility&quot; /&gt;\n        &lt;/ResourceDictionary&gt;\n    &lt;/ResourceDictionary.MergedDictionaries&gt;\n\n    &lt;Style TargetType=&quot;local:ResizebleModernButton&quot;&gt;\n        &lt;Setter Property=&quot;FocusVisualStyle&quot; Value=&quot;{x:Null}&quot; /&gt;\n        &lt;Setter Property=&quot;HorizontalContentAlignment&quot; Value=&quot;Center&quot; /&gt;\n        &lt;Setter Property=&quot;VerticalContentAlignment&quot; Value=&quot;Center&quot; /&gt;\n        &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{DynamicResource ModernButtonText}&quot; /&gt;\n        &lt;Setter Property=&quot;Padding&quot; Value=&quot;0&quot; /&gt;\n        &lt;Setter Property=&quot;Radius&quot; Value=&quot;{DynamicResource defaultButtonRadius}&quot; /&gt;\n        &lt;Setter Property=&quot;Template&quot;&gt;\n            &lt;Setter.Value&gt;\n                &lt;ControlTemplate TargetType=&quot;local:ResizebleModernButton&quot;&gt;\n                    &lt;Grid x:Name=&quot;grid&quot;\n                          Margin=&quot;{TemplateBinding Padding}&quot;\n                          Background=&quot;Transparent&quot;&gt;\n                        &lt;Grid.RowDefinitions&gt;\n                            &lt;RowDefinition Height=&quot;Auto&quot; /&gt;\n                            &lt;RowDefinition Height=&quot;Auto&quot; /&gt;\n                        &lt;/Grid.RowDefinitions&gt;\n\n                        &lt;Grid Width=&quot;{TemplateBinding Radius}&quot;\n                              Height=&quot;{TemplateBinding Radius}&quot;\n                              MinWidth=&quot;18&quot;\n                              MinHeight=&quot;18&quot;&gt;\n                            &lt;Ellipse x:Name=&quot;ellipse&quot;\n                                     VerticalAlignment=&quot;Stretch&quot;\n                                     Stroke=&quot;{DynamicResource ModernButtonBorder}&quot;\n                                     StrokeThickness=&quot;{Binding Path=Radius,\n                                                               RelativeSource={RelativeSource AncestorType=Button},\n                                                               Converter={StaticResource ResourceKey=StrokeThicknessConverter}}&quot; /&gt;\n                            &lt;Path x:Name=&quot;icon&quot;\n                                  Width=&quot;{Binding Path=Radius,\n                                                  RelativeSource={RelativeSource AncestorType=Button},\n                                                  Converter={StaticResource ResourceKey=IconSizeConverter}}&quot;\n                                  Height=&quot;{Binding Path=Radius,\n                                                   RelativeSource={RelativeSource AncestorType=Button},\n                                                   Converter={StaticResource ResourceKey=IconSizeConverter}}&quot;\n                                  HorizontalAlignment=&quot;Center&quot;\n                                  VerticalAlignment=&quot;Center&quot;\n                                  Data=&quot;{TemplateBinding IconData}&quot;\n                                  Fill=&quot;{TemplateBinding Foreground}&quot;\n                                  Stretch=&quot;Uniform&quot; /&gt;\n                        &lt;/Grid&gt;\n                        &lt;TextBlock Grid.Row=&quot;1&quot;\n                                   HorizontalAlignment=&quot;{TemplateBinding HorizontalAlignment}&quot;\n                                   VerticalAlignment=&quot;{TemplateBinding VerticalAlignment}&quot;\n                                   DataContext=&quot;{TemplateBinding Content}&quot;\n                                   Foreground=&quot;{TemplateBinding Foreground}&quot;\n                                   Text=&quot;{Binding}&quot;\n                                   TextTrimming=&quot;CharacterEllipsis&quot;\n                                   Visibility=&quot;{Binding Converter={StaticResource ResourceKey=StringToVisibility}}&quot; /&gt;\n                    &lt;/Grid&gt;\n                    &lt;ControlTemplate.Triggers&gt;\n                        &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;\n                            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{DynamicResource ModernButtonTextHover}&quot; /&gt;\n                            &lt;Setter TargetName=&quot;ellipse&quot; Property=&quot;Stroke&quot; Value=&quot;{DynamicResource ModernButtonBorderHover}&quot; /&gt;\n                        &lt;/Trigger&gt;\n                        &lt;Trigger Property=&quot;IsPressed&quot; Value=&quot;True&quot;&gt;\n                            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{DynamicResource ModernButtonTextPressed}&quot; /&gt;\n                            &lt;Setter TargetName=&quot;ellipse&quot; Property=&quot;Stroke&quot; Value=&quot;{DynamicResource ModernButtonBorderPressed}&quot; /&gt;\n                            &lt;Setter TargetName=&quot;ellipse&quot; Property=&quot;Fill&quot; Value=&quot;{DynamicResource ModernButtonIconBackgroundPressed}&quot; /&gt;\n                            &lt;Setter TargetName=&quot;icon&quot; Property=&quot;Fill&quot; Value=&quot;{DynamicResource ModernButtonIconForegroundPressed}&quot; /&gt;\n                        &lt;/Trigger&gt;\n                        &lt;Trigger Property=&quot;IsEnabled&quot; Value=&quot;false&quot;&gt;\n                            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{DynamicResource ModernButtonTextDisabled}&quot; /&gt;\n                            &lt;Setter TargetName=&quot;ellipse&quot; Property=&quot;Stroke&quot; Value=&quot;{DynamicResource ModernButtonBorderDisabled}&quot; /&gt;\n                        &lt;/Trigger&gt;\n                        &lt;Trigger Property=&quot;IsFocused&quot; Value=&quot;true&quot;&gt;\n                            &lt;Setter TargetName=&quot;ellipse&quot; Property=&quot;Stroke&quot; Value=&quot;{DynamicResource Accent}&quot; /&gt;\n                        &lt;/Trigger&gt;\n                    &lt;/ControlTemplate.Triggers&gt;\n                &lt;/ControlTemplate&gt;\n            &lt;/Setter.Value&gt;\n        &lt;/Setter&gt;\n    &lt;/Style&gt;\n\n&lt;/ResourceDictionary&gt;</code></pre>\n\nYou must use correct <strong>xmlns:converter</strong> and <strong>xmlns:local</strong> namespaces. The best approach is to take a button style from a FirstFloor source code as an example and update it. The most significant job, as I expect, is going to be in the the <strong>&lt;ControlTemplate.Triggers&gt;</strong> part where you should add trigger for a IsChecked state (and may be others).<br />\n<ul>\n<li>\nIn your App.xaml use <br />\n</li>\n</ul>\n<pre><code>&lt;ResourceDictionary.MergedDictionaries&gt;\n                &lt;ResourceDictionary Source=&quot;/FirstFloor.ModernUI;component/Assets/ModernUI.xaml&quot; /&gt;\n                &lt;ResourceDictionary Source=&quot;/FirstFloor.ModernUI;component/Assets/ModernUI.Dark.xaml&quot; /&gt;\n\n                &lt;ResourceDictionary Source=&quot;/YourFolder/YourButton.xaml&quot; /&gt;\n&lt;/ResourceDictionary.MergedDictionaries&gt;</code></pre>\n\nwhere the <strong>/YourFolder/YourButton.xaml</strong> is a path to your ToggleButton.\r<br />\n<br />\n<br />\nHope it will help you.<br />\n",
    "PostedDate": "2013-07-02T17:29:17.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1121003",
    "ThreadId": "442290",
    "Html": "Tried without success.\r<br />\n<br />\nIn your case, where is exactly converters?\r<br />\nThe ResizeableModernButton does not exist in the namespace. in my case, xmlns:local=&quot;clr-namespace:RemoteConfigurator.Classes&quot;\r<br />\nan excerpt of the class<br />\n<pre><code>namespace RemoteConfigurator.Classes\n{\n    public class ResizebleModernButton : ModernButton\n    {\n</code></pre>\n\nThanks.\r<br />\n<br />\n<strong>poborin wrote:</strong><br />\n<blockquote>\nHi everytimer,<br />\n<br />\nI've end up with no ToggleButton in my current UI design, so I don't have a cooked solution, but it's a quite a straight forward task. Let me show you an example:<br />\n<ul>\n<li>Create a .cs file with DependecyProperties, in my case it was a:</li>\n</ul>\n<pre><code>public class ResizebleModernButton : ModernButton\n    {\n        public static readonly DependencyProperty RadiusProperty =\n            DependencyProperty.Register(&quot;Radius&quot;, typeof(double), typeof(ResizebleModernButton));\n\n        public double Radius\n        {\n            get { return (double)GetValue(RadiusProperty); }\n            set { SetValue(RadiusProperty, value); }\n        }\n\n        static ResizebleModernButton()\n        {\n            DefaultStyleKeyProperty.OverrideMetadata(typeof(ResizebleModernButton), new FrameworkPropertyMetadata(typeof(ToggleTile)));\n        }\n    }</code></pre>\n\nBe sure that it based on <strong>ToggleButton</strong> instead of <strong>ModernButton</strong>. In your case you can be interested in some other properties, such an image, title etc.<br />\n<ul>\n<li>Then create a .xaml file to apply styles such as</li>\n</ul>\n<pre><code>&lt;ResourceDictionary xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n                    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n                    xmlns:controls=&quot;http://firstfloorsoftware.com/ModernUI&quot;\n                    xmlns:converter=&quot;clr-namespace:YourNamespace.Converters&quot;\n                    xmlns:local=&quot;clr-namespace:YourNamespace.CustomControls&quot;\n                    xmlns:sys=&quot;clr-namespace:System;assembly=mscorlib&quot;&gt;\n\n    &lt;ResourceDictionary.MergedDictionaries&gt;\n        &lt;ResourceDictionary Source=&quot;/FirstFloor.ModernUI;component/Assets/Converters.xaml&quot; /&gt;\n        &lt;ResourceDictionary&gt;\n            &lt;converter:ResizebleEllipseStrokeThicknessConverter x:Key=&quot;StrokeThicknessConverter&quot; /&gt;\n            &lt;converter:ResizebleModernButtonIconConverter x:Key=&quot;IconSizeConverter&quot; /&gt;\n            &lt;converter:StringNullOrEmptyToVisibilityConverter x:Key=&quot;StringToVisibility&quot; /&gt;\n        &lt;/ResourceDictionary&gt;\n    &lt;/ResourceDictionary.MergedDictionaries&gt;\n\n    &lt;Style TargetType=&quot;local:ResizebleModernButton&quot;&gt;\n        &lt;Setter Property=&quot;FocusVisualStyle&quot; Value=&quot;{x:Null}&quot; /&gt;\n        &lt;Setter Property=&quot;HorizontalContentAlignment&quot; Value=&quot;Center&quot; /&gt;\n        &lt;Setter Property=&quot;VerticalContentAlignment&quot; Value=&quot;Center&quot; /&gt;\n        &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{DynamicResource ModernButtonText}&quot; /&gt;\n        &lt;Setter Property=&quot;Padding&quot; Value=&quot;0&quot; /&gt;\n        &lt;Setter Property=&quot;Radius&quot; Value=&quot;{DynamicResource defaultButtonRadius}&quot; /&gt;\n        &lt;Setter Property=&quot;Template&quot;&gt;\n            &lt;Setter.Value&gt;\n                &lt;ControlTemplate TargetType=&quot;local:ResizebleModernButton&quot;&gt;\n                    &lt;Grid x:Name=&quot;grid&quot;\n                          Margin=&quot;{TemplateBinding Padding}&quot;\n                          Background=&quot;Transparent&quot;&gt;\n                        &lt;Grid.RowDefinitions&gt;\n                            &lt;RowDefinition Height=&quot;Auto&quot; /&gt;\n                            &lt;RowDefinition Height=&quot;Auto&quot; /&gt;\n                        &lt;/Grid.RowDefinitions&gt;\n\n                        &lt;Grid Width=&quot;{TemplateBinding Radius}&quot;\n                              Height=&quot;{TemplateBinding Radius}&quot;\n                              MinWidth=&quot;18&quot;\n                              MinHeight=&quot;18&quot;&gt;\n                            &lt;Ellipse x:Name=&quot;ellipse&quot;\n                                     VerticalAlignment=&quot;Stretch&quot;\n                                     Stroke=&quot;{DynamicResource ModernButtonBorder}&quot;\n                                     StrokeThickness=&quot;{Binding Path=Radius,\n                                                               RelativeSource={RelativeSource AncestorType=Button},\n                                                               Converter={StaticResource ResourceKey=StrokeThicknessConverter}}&quot; /&gt;\n                            &lt;Path x:Name=&quot;icon&quot;\n                                  Width=&quot;{Binding Path=Radius,\n                                                  RelativeSource={RelativeSource AncestorType=Button},\n                                                  Converter={StaticResource ResourceKey=IconSizeConverter}}&quot;\n                                  Height=&quot;{Binding Path=Radius,\n                                                   RelativeSource={RelativeSource AncestorType=Button},\n                                                   Converter={StaticResource ResourceKey=IconSizeConverter}}&quot;\n                                  HorizontalAlignment=&quot;Center&quot;\n                                  VerticalAlignment=&quot;Center&quot;\n                                  Data=&quot;{TemplateBinding IconData}&quot;\n                                  Fill=&quot;{TemplateBinding Foreground}&quot;\n                                  Stretch=&quot;Uniform&quot; /&gt;\n                        &lt;/Grid&gt;\n                        &lt;TextBlock Grid.Row=&quot;1&quot;\n                                   HorizontalAlignment=&quot;{TemplateBinding HorizontalAlignment}&quot;\n                                   VerticalAlignment=&quot;{TemplateBinding VerticalAlignment}&quot;\n                                   DataContext=&quot;{TemplateBinding Content}&quot;\n                                   Foreground=&quot;{TemplateBinding Foreground}&quot;\n                                   Text=&quot;{Binding}&quot;\n                                   TextTrimming=&quot;CharacterEllipsis&quot;\n                                   Visibility=&quot;{Binding Converter={StaticResource ResourceKey=StringToVisibility}}&quot; /&gt;\n                    &lt;/Grid&gt;\n                    &lt;ControlTemplate.Triggers&gt;\n                        &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;\n                            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{DynamicResource ModernButtonTextHover}&quot; /&gt;\n                            &lt;Setter TargetName=&quot;ellipse&quot; Property=&quot;Stroke&quot; Value=&quot;{DynamicResource ModernButtonBorderHover}&quot; /&gt;\n                        &lt;/Trigger&gt;\n                        &lt;Trigger Property=&quot;IsPressed&quot; Value=&quot;True&quot;&gt;\n                            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{DynamicResource ModernButtonTextPressed}&quot; /&gt;\n                            &lt;Setter TargetName=&quot;ellipse&quot; Property=&quot;Stroke&quot; Value=&quot;{DynamicResource ModernButtonBorderPressed}&quot; /&gt;\n                            &lt;Setter TargetName=&quot;ellipse&quot; Property=&quot;Fill&quot; Value=&quot;{DynamicResource ModernButtonIconBackgroundPressed}&quot; /&gt;\n                            &lt;Setter TargetName=&quot;icon&quot; Property=&quot;Fill&quot; Value=&quot;{DynamicResource ModernButtonIconForegroundPressed}&quot; /&gt;\n                        &lt;/Trigger&gt;\n                        &lt;Trigger Property=&quot;IsEnabled&quot; Value=&quot;false&quot;&gt;\n                            &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{DynamicResource ModernButtonTextDisabled}&quot; /&gt;\n                            &lt;Setter TargetName=&quot;ellipse&quot; Property=&quot;Stroke&quot; Value=&quot;{DynamicResource ModernButtonBorderDisabled}&quot; /&gt;\n                        &lt;/Trigger&gt;\n                        &lt;Trigger Property=&quot;IsFocused&quot; Value=&quot;true&quot;&gt;\n                            &lt;Setter TargetName=&quot;ellipse&quot; Property=&quot;Stroke&quot; Value=&quot;{DynamicResource Accent}&quot; /&gt;\n                        &lt;/Trigger&gt;\n                    &lt;/ControlTemplate.Triggers&gt;\n                &lt;/ControlTemplate&gt;\n            &lt;/Setter.Value&gt;\n        &lt;/Setter&gt;\n    &lt;/Style&gt;\n\n&lt;/ResourceDictionary&gt;</code></pre>\n\nYou must use correct <strong>xmlns:converter</strong> and <strong>xmlns:local</strong> namespaces. The best approach is to take a button style from a FirstFloor source code as an example and update it. The most significant job, as I expect, is going to be in the the <strong>&lt;ControlTemplate.Triggers&gt;</strong> part where you should add trigger for a IsChecked state (and may be others).<br />\n<ul>\n<li>\nIn your App.xaml use <br />\n</li>\n</ul>\n<pre><code>&lt;ResourceDictionary.MergedDictionaries&gt;\n                &lt;ResourceDictionary Source=&quot;/FirstFloor.ModernUI;component/Assets/ModernUI.xaml&quot; /&gt;\n                &lt;ResourceDictionary Source=&quot;/FirstFloor.ModernUI;component/Assets/ModernUI.Dark.xaml&quot; /&gt;\n\n                &lt;ResourceDictionary Source=&quot;/YourFolder/YourButton.xaml&quot; /&gt;\n&lt;/ResourceDictionary.MergedDictionaries&gt;</code></pre>\n\nwhere the <strong>/YourFolder/YourButton.xaml</strong> is a path to your ToggleButton.<br />\n<br />\n<br />\nHope it will help you.<br />\n</blockquote>\n",
    "PostedDate": "2013-11-10T07:54:59.767-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1345588",
    "ThreadId": "442290",
    "Html": "Quite simple ToggleButton template with dynamic resource links to ModernUI template properties<br />\n<pre><code>    &lt;Style TargetType=&quot;ToggleButton&quot;&gt;\n        &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource ButtonBackground}&quot;&gt;&lt;/Setter&gt;\n        &lt;Setter Property=&quot;BorderBrush&quot; Value=&quot;{DynamicResource ButtonBorder}&quot;&gt;&lt;/Setter&gt;\n        &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{DynamicResource ButtonText}&quot;&gt;&lt;/Setter&gt;\n\n\n        &lt;Setter Property=&quot;Template&quot;&gt;\n            &lt;Setter.Value&gt;\n                &lt;ControlTemplate TargetType=&quot;{x:Type ToggleButton}&quot;&gt;\n                    &lt;Border BorderThickness=&quot;1&quot; BorderBrush=&quot;{TemplateBinding BorderBrush}&quot; Background=&quot;{TemplateBinding Background}&quot;&gt;                        \n                        &lt;ContentPresenter Margin=&quot;1&quot;/&gt;\n                    &lt;/Border&gt;\n                &lt;/ControlTemplate&gt;\n            &lt;/Setter.Value&gt;\n        &lt;/Setter&gt;\n        &lt;Style.Triggers&gt;\n            &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;\n                &lt;Setter Property=&quot;Button.Background&quot; Value=&quot;{DynamicResource ButtonBackgroundHover}&quot;&gt;&lt;/Setter&gt;\n                &lt;Setter Property=&quot;Button.BorderBrush&quot; Value=&quot;{DynamicResource ButtonBorderHover}&quot;&gt;&lt;/Setter&gt;\n            &lt;/Trigger&gt;\n            &lt;Trigger Property=&quot;IsPressed&quot; Value=&quot;True&quot;&gt;\n                &lt;Setter Property=&quot;Button.Background&quot; Value=&quot;{DynamicResource ButtonBackgroundPressed}&quot;&gt;&lt;/Setter&gt;\n                &lt;Setter Property=&quot;Button.BorderBrush&quot; Value=&quot;{DynamicResource ButtonBorderPressed}&quot;&gt;&lt;/Setter&gt;\n            &lt;/Trigger&gt;\n            &lt;Trigger Property=&quot;IsChecked&quot; Value=&quot;true&quot;&gt;\n                &lt;Setter Property=&quot;Button.Background&quot; Value=&quot;{DynamicResource ButtonBackgroundPressed}&quot;&gt;&lt;/Setter&gt;\n                &lt;Setter Property=&quot;Button.BorderBrush&quot; Value=&quot;{DynamicResource ButtonBorderPressed}&quot;&gt;&lt;/Setter&gt;\n            &lt;/Trigger&gt;\n            &lt;Trigger Property=&quot;IsEnabled&quot; Value=&quot;false&quot;&gt;\n                &lt;Setter Property=&quot;Button.Foreground&quot; Value=&quot;{DynamicResource ButtonTextDisabled}&quot;&gt;&lt;/Setter&gt;\n                &lt;Setter Property=&quot;Button.BorderBrush&quot; Value=&quot;{DynamicResource ModernButtonBorderDisabled}&quot;&gt;&lt;/Setter&gt;\n            &lt;/Trigger&gt;\n        &lt;/Style.Triggers&gt;\n    &lt;/Style&gt;</code></pre>\n\nUsage with Path as the content (binding is needed to change foreground for disabled state):<br />\n<pre><code>                &lt;ToggleButton Name=&quot;butSelect&quot; Width=&quot;25&quot; Height=&quot;25&quot;  Margin=&quot;1&quot; ToolTip=&quot;Selection mode&quot; IsEnabled=&quot;False&quot;&gt;\n                    &lt;Path  Stretch=&quot;Uniform&quot; Fill=&quot;{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=Foreground}&quot; Data=&quot;F1 M 29,18L 52.25,41.1667L 43.0865,42.6585L 50.817,56.6949L 43.827,60.4115L 36,46.25L 29,53.25L 29,18 Z &quot;/&gt;\n                &lt;/ToggleButton&gt;</code></pre>\n\n",
    "PostedDate": "2015-01-24T23:56:27.673-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]