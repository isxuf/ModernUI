[
  {
    "Id": "1241493",
    "ThreadId": "544308",
    "Html": "List Layout width is set to 170, I needed to make this adjustable width through a dependency property named &quot;ListWidth&quot;.<br />\nThis allowed to have a search text box and resize it to the width of the list.<br />\n<br />\nLike this :<br />\n<img src=\"http:/gilles.macabies.perso.sfr.fr/demoModerntab.jpg\" alt=\"Image\" /><br />\n<br />\nIf it can help someone, below the code.<br />\n<br />\n<strong>1) Add DoubleToGridLengthConverter.cs file in Windows-&gt;Converters</strong><br />\n<pre><code>namespace FirstFloor.ModernUI.Windows.Converters\n{\n /// &lt;summary&gt;\n /// Convert double to GridLength\n /// &lt;/summary&gt;\n [ValueConversion(typeof(Double), typeof(GridLength))]\n internal class DoubleToGridLengthConverter : IValueConverter\n {\n   /// &lt;summary&gt;\n   /// Converts a value.\n   /// &lt;/summary&gt;\n   /// &lt;param name=&quot;value&quot;&gt;The value produced by the binding source.&lt;/param&gt;\n   /// &lt;param name=&quot;targetType&quot;&gt;The type of the binding target property.&lt;/param&gt;\n   /// &lt;param name=&quot;parameter&quot;&gt;The converter parameter to use.&lt;/param&gt;\n   /// &lt;param name=&quot;culture&quot;&gt;The culture to use in the converter.&lt;/param&gt;\n   /// &lt;returns&gt;\n   /// A converted value. If the method returns null, the valid null value is used.\n   /// &lt;/returns&gt;\n   public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n   {\n    // check whether a value is given\n    if (value != null)\n    {\n        double i = (double)value;\n        GridLength result = new GridLength(i);\n        return result;\n    }\n    else\n    {\n        throw new ValueUnavailableException();\n    }\n   }\n\n   /// &lt;summary&gt;\n   /// Converts a value.\n   /// &lt;/summary&gt;\n   /// &lt;param name=&quot;value&quot;&gt;The value that is produced by the binding target.&lt;/param&gt;\n   /// &lt;param name=&quot;targetType&quot;&gt;The type to convert to.&lt;/param&gt;\n   /// &lt;param name=&quot;parameter&quot;&gt;The converter parameter to use.&lt;/param&gt;\n   /// &lt;param name=&quot;culture&quot;&gt;The culture to use in the converter.&lt;/param&gt;\n   /// &lt;returns&gt;\n   /// A converted value. If the method returns null, the valid null value is used.\n   /// &lt;/returns&gt;\n   public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n   {\n     // check whether a value is given\n     if (value != null)\n     {\n         GridLength g = (GridLength)value;\n         return (double)g.Value;\n     }\n     else\n     {\n         throw new ValueUnavailableException();\n     }\n   }\n }\n}\n</code></pre>\n\n<strong>2) Add in Assets-&gt;Converters.xaml</strong><br />\n<pre><code>&lt;converters:DoubleToGridLengthConverter x:Key=&quot;DoubleToGridLengthConverter&quot; /&gt;\n\n</code></pre>\n\n<strong>3) Add in ModernTab.cs ( FirstFloor.ModernUI.Windows.Controls)</strong><br />\n<pre><code>/// &lt;summary&gt;\n/// Identifies the ListWidth dependency property. (170.0 is default value for width)\n/// &lt;/summary&gt;\npublic static readonly DependencyProperty ListWidthProperty = DependencyProperty.Register(&quot;ListWidth&quot;, typeof(Double),\n    typeof(ModernTab), new PropertyMetadata(170.0));\n\n\n/// &lt;summary&gt;\n/// Gets or sets the width of the List.\n/// &lt;/summary&gt;\n/// &lt;value&gt;The value of the List.&lt;/value&gt;\npublic Double ListWidth\n{\n    get { return (Double)GetValue(ListWidthProperty); }\n    set {SetValue(ListWidthProperty,value); }\n}\n</code></pre>\n\n<strong>4) Change in Themes&gt;ModernTab.xaml</strong><br />\n<br />\n&lt;Style.Triggers&gt;<br />\n  &lt;Trigger Property=&quot;Layout&quot; Value=&quot;List&quot;&gt;<br />\n   &lt;Trigger.Setters&gt;<br />\n<pre><code>&lt;Setter Property=&quot;Template&quot;&gt;\n &lt;Setter.Value&gt;\n  &lt;ControlTemplate TargetType=&quot;controls:ModernTab&quot;&gt;\n   &lt;Grid&gt;\n    &lt;Grid.ColumnDefinitions&gt;\n      &lt;!- CHANGE --&gt;\n      &lt;!--\n      &lt;ColumnDefinition Width=&quot;170&quot;/&gt;\n      &lt;ColumnDefinition Width=&quot;9&quot; /&gt;\n      &lt;ColumnDefinition /&gt;\n      --&gt;\n     &lt;ColumnDefinition  Width=&quot;{Binding Path=ListWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay,\n                        Converter={StaticResource DoubleToGridLengthConverter}}&quot; MinWidth=&quot;50&quot; /&gt;\n     &lt;ColumnDefinition Width=&quot;1&quot; /&gt;\n     &lt;ColumnDefinition Width=&quot;*&quot;/&gt;\n\n     &lt;!-- END CHANGE --&gt;\n    &lt;/Grid.ColumnDefinitions&gt;\n\n    &lt;!-- link list --&gt;\n    &lt;ListBox x:Name=&quot;LinkList&quot; ItemsSource=&quot;{TemplateBinding Links}&quot;\n             Width=&quot;Auto&quot;\n             ScrollViewer.HorizontalScrollBarVisibility=&quot;{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}&quot;&gt;\n        &lt;ListBox.ItemTemplate&gt;\n            &lt;DataTemplate&gt;\n                &lt;TextBlock Text=&quot;{Binding DisplayName, Converter={StaticResource ToUpperConverter}}&quot;\n                           Margin=&quot;10,2,2,2&quot; FontSize=&quot;{DynamicResource SmallFontSize}&quot; TextTrimming=&quot;CharacterEllipsis&quot; /&gt;\n            &lt;/DataTemplate&gt;\n        &lt;/ListBox.ItemTemplate&gt;\n    &lt;/ListBox&gt;\n\n    &lt;!-- seperator --&gt;\n    &lt;!-- CHANGE --&gt;\n    &lt;!--&lt;Rectangle Grid.Column=&quot;1&quot; Fill=&quot;{DynamicResource SeparatorBackground}&quot; Width=&quot;1&quot; HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Stretch&quot; /&gt;--&gt;\n    &lt;GridSplitter Grid.Column=&quot;1&quot;  Background=&quot;{DynamicResource SeparatorBackground}&quot;\n                  HorizontalAlignment=&quot;Stretch&quot; VerticalAlignment=&quot;Stretch&quot;\n                  ShowsPreview=&quot;True&quot;/&gt;\n                  &lt;!-- ShowsPreview display preview new size : True/False --&gt;\n\n    &lt;!-- END CHANGE --&gt;\n    &lt;!-- content --&gt;\n    &lt;controls:ModernFrame Grid.Column=&quot;2&quot; Source=&quot;{Binding SelectedSource, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}&quot;\n                          ContentLoader=&quot;{TemplateBinding ContentLoader}&quot; Margin=&quot;32,0,0,0&quot; /&gt;\n   &lt;/Grid&gt;\n  &lt;/ControlTemplate&gt;\n &lt;/Setter.Value&gt;\n&lt;/Setter&gt;</code></pre>\n\n&lt;/Trigger.Setters&gt;<br />\n  &lt;/Trigger&gt;<br />\n&lt;/Style.Triggers&gt;<br />\n<br />\n <strong>5 ) Usage</strong><br />\n<pre><code>&lt;mui:ModernTab SelectedSource=&quot;/2&quot; Layout=&quot;List&quot;  x:Name=&quot;tabList&quot; Height=&quot;256&quot; ListWidth=&quot;110&quot;&gt;\n</code></pre>\n\n<strong>You can retrieve ListWidth in this way :</strong><br />\n<pre><code>&lt;TextBox Width=&quot;{Binding ElementName=tabList, Path=ListWidth}&quot;  /&gt;</code></pre>\n\n",
    "PostedDate": "2014-05-05T04:59:44.937-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1260229",
    "ThreadId": "544308",
    "Html": "@macgile\r<br />\n<br />\nNice job. Thanks a lot.<br />\n",
    "PostedDate": "2014-06-26T16:07:17.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]