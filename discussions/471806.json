[
  {
    "Id": "1131353",
    "ThreadId": "471806",
    "Html": "Hi \r<br />\n<br />\nI would like to use unity container with WPF modren UI.\r<br />\n<br />\nAny help is appreciated. Thanks a lot.<br />\n",
    "PostedDate": "2013-12-03T11:42:57.207-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132016",
    "ThreadId": "471806",
    "Html": "Yeah, I had to do the similar, MEF gave me grief, when I wanted to have more complicated management of metadata. I attribute that to a lack of knowledge of MEF on my side.<br />\n<br />\nA few things to get Unity DI, which I'm sure you already know. Pull through the nugget packages for Unity and ServiceLocator.<br />\n<br />\nStep 1)  Create a UnityServiceLocator.cs<br />\n<pre><code>using Microsoft.Practices.ServiceLocation;\nusing Microsoft.Practices.Unity;\nusing System;\nusing System.Collections.Generic;\n/// &lt;summary&gt;\n/// Unity Service Locator\n/// &lt;/summary&gt;\npublic class UnityServiceLocator : IServiceLocator\n{\n    private readonly IUnityContainer _unityContainer;\n    /// &lt;summary&gt;\n    /// Initializes a new instance of the &lt;see cref=&quot;UnityServiceLocator&quot;/&gt; class.\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;unityContainer&quot;&gt;The unity container.&lt;/param&gt;\n    public UnityServiceLocator(IUnityContainer unityContainer)\n    {\n        _unityContainer = unityContainer;\n    }\n    /// &lt;summary&gt;\n    /// Gets all instances.\n    /// &lt;/summary&gt;\n    /// &lt;typeparam name=&quot;TService&quot;&gt;The type of the service.&lt;/typeparam&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    public IEnumerable&lt;TService&gt; GetAllInstances&lt;TService&gt;()\n    {\n        return _unityContainer.ResolveAll&lt;TService&gt;();\n    }\n\n    /// &lt;summary&gt;\n    /// Get all instances of the given &lt;paramref name=&quot;serviceType&quot; /&gt; currently\n    /// registered in the container.\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;serviceType&quot;&gt;Type of object requested.&lt;/param&gt;\n    /// &lt;returns&gt;\n    /// A sequence of instances of the requested &lt;paramref name=&quot;serviceType&quot; /&gt;.\n    /// &lt;/returns&gt;\n    public IEnumerable&lt;object&gt; GetAllInstances(Type serviceType)\n    {\n        foreach (object instance in _unityContainer.ResolveAll(serviceType))\n        {\n            yield return instance;\n        }\n        //return _unityContainer.ResolveAll(serviceType);\n    }\n\n    /// &lt;summary&gt;\n    /// Gets the instance.\n    /// &lt;/summary&gt;\n    /// &lt;typeparam name=&quot;TService&quot;&gt;The type of the service.&lt;/typeparam&gt;\n    /// &lt;param name=&quot;key&quot;&gt;The key.&lt;/param&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    public TService GetInstance&lt;TService&gt;(string key)\n    {\n        return _unityContainer.Resolve&lt;TService&gt;(key);\n    }\n\n    /// &lt;summary&gt;\n    /// Gets the instance.\n    /// &lt;/summary&gt;\n    /// &lt;typeparam name=&quot;TService&quot;&gt;The type of the service.&lt;/typeparam&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    public TService GetInstance&lt;TService&gt;()\n    {\n        return _unityContainer.Resolve&lt;TService&gt;();\n    }\n\n    /// &lt;summary&gt;\n    /// Get an instance of the given named &lt;paramref name=&quot;serviceType&quot; /&gt;.\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;serviceType&quot;&gt;Type of object requested.&lt;/param&gt;\n    /// &lt;param name=&quot;key&quot;&gt;Name the object was registered with.&lt;/param&gt;\n    /// &lt;returns&gt;\n    /// The requested service instance.\n    /// &lt;/returns&gt;\n    public object GetInstance(Type serviceType, string key)\n    {\n        return _unityContainer.Resolve(serviceType, key);\n    }\n\n    /// &lt;summary&gt;\n    /// Get an instance of the given &lt;paramref name=&quot;serviceType&quot; /&gt;.\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;serviceType&quot;&gt;Type of object requested.&lt;/param&gt;\n    /// &lt;returns&gt;\n    /// The requested service instance.\n    /// &lt;/returns&gt;\n    public object GetInstance(Type serviceType)\n    {\n        return _unityContainer.Resolve(serviceType);\n    }\n\n    /// &lt;summary&gt;\n    /// Gets the service object of the specified type.\n    /// &lt;/summary&gt;\n    /// &lt;param name=&quot;serviceType&quot;&gt;An object that specifies the type of service object to get.&lt;/param&gt;\n    /// &lt;returns&gt;\n    /// A service object of type &lt;paramref name=&quot;serviceType&quot; /&gt;.-or- null if there is no service object of type &lt;paramref name=&quot;serviceType&quot; /&gt;.\n    /// &lt;/returns&gt;\n    public object GetService(Type serviceType)\n    {\n        return _unityContainer.Resolve(serviceType);\n    }\n}\n</code></pre>\n\nNothing too tricky here.<br />\n<br />\n<br />\nStep 2)<br />\n<br />\nI followed the ViewModelLocater.cs route, so create on of those, register your DI i.e &quot;ServiceLocator.SetLocatorProvider(() =&gt; new UnityServiceLocator(container));&quot; like below in the contructor with all your registrations.<br />\n<br />\npublic class ViewModelLocator<br />\n<pre><code>{\n    static IEnumerable&lt;ContainerRegistration&gt; registrations;\n    /// &lt;summary&gt;\n    /// Initializes the &lt;see cref=&quot;ViewModelLocator&quot;/&gt; class.\n    /// &lt;/summary&gt;\n    static ViewModelLocator()\n    {\n        var container = new UnityContainer();\n        ServiceLocator.SetLocatorProvider(() =&gt; new UnityServiceLocator(container));\n\n        // You can do automatic loading of all your registrations, but can be expensive on the loading times,\n        // but I chose the manual route, the reflection was perf hit for me\n\n        container.RegisterType&lt;INavigationService, NavigationService&gt;();\n        //container.RegisterType&lt;IDataService, DataService&gt;();\n        //container.RegisterType&lt;IAppStateService, AppStateService&gt;();\n        //container.RegisterType&lt;ILoggerFacade, LoggerService&gt;();\n        //container.RegisterType&lt;ISystemDbService, SystemDbService&gt;();\n\n        container.RegisterType&lt;HomeViewModel&gt;();\n        container.RegisterType&lt;LoginViewModel&gt;();\n\n\n        registrations = container.Registrations;  // is for later use to query meta information\n      }\n</code></pre>\n\n/// &lt;summary&gt;<br />\n<pre><code>    /// Gets the home view model.\n    /// &lt;/summary&gt;\n    /// &lt;value&gt;\n    /// The home view model.\n    /// &lt;/value&gt;\n    [SuppressMessage(&quot;Microsoft.Performance&quot;, &quot;CA1822:MarkMembersAsStatic&quot;, Justification = &quot;This non-static member is needed for data binding purposes.&quot;)]\n    public HomeViewModel Home\n    {\n        get\n        {\n            return ServiceLocator.Current.GetInstance&lt;HomeViewModel&gt;();\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// Gets the login view model.\n    /// &lt;/summary&gt;\n    /// &lt;value&gt;\n    /// The login view model.\n    /// &lt;/value&gt;\n    [SuppressMessage(&quot;Microsoft.Performance&quot;, &quot;CA1822:MarkMembersAsStatic&quot;, Justification = &quot;This non-static member is needed for data binding purposes.&quot;)]\n    public LoginViewModel Login\n    {\n        get\n        {\n            return ServiceLocator.Current.GetInstance&lt;LoginViewModel&gt;();\n        }\n    }</code></pre>\n\n}<br />\n<br />\nStep 3) In your app.xaml, add your viewmodellocator, this will be for your views and blendability<br />\n<br />\n&lt;Application x:Class=&quot;Rms.App&quot;<br />\n<pre><code>         xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n         xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n         xmlns:d1p1=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n         xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; \n         xmlns:vm=&quot;clr-namespace:XXX.ViewModel&quot;\n         d1p1:Ignorable=&quot;d&quot; \n         StartupUri=&quot;View/MainWindowView.xaml&quot;&gt;\n&lt;Application.Resources&gt;\n    &lt;ResourceDictionary&gt;\n        &lt;ResourceDictionary.MergedDictionaries&gt;\n            &lt;ResourceDictionary Source=&quot;/FirstFloor.ModernUI;component/Assets/ModernUI.xaml&quot; /&gt;\n            &lt;ResourceDictionary Source=&quot;/FirstFloor.ModernUI;component/Assets/ModernUI.Light.xaml&quot;/&gt;\n        &lt;/ResourceDictionary.MergedDictionaries&gt;\n        &lt;vm:ViewModelLocator x:Key=&quot;Locator&quot; d:IsDataSource=&quot;True&quot; /&gt;\n    &lt;/ResourceDictionary&gt;\n&lt;/Application.Resources&gt;</code></pre>\n\n&lt;/Application&gt;<br />\n<br />\n<br />\nStep 4) In your viewmodels<br />\n<br />\nyou can get an instance to your vm like so<br />\n<br />\nvar vm = ServiceLocator.Current.GetInstance&lt;LoginViewModel&gt;();<br />\n<br />\n<br />\nNote, this is just a basic example. The real fun is the extensible stuff like the interception of calls, events etc on your registered instance, for example I'm doing transparent logging on my viewmodels, with completely no logging code on the viewmodels.<br />\n<br />\nHope this helps you.<br />\n<br />\nRegards<br />\nPrakashZa<br />\n",
    "PostedDate": "2013-12-04T23:51:08.1-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132086",
    "ThreadId": "471806",
    "Html": "\r\n<div>Thanks Praskashza, really it's working<br>\r\n<br>\r\nSent from my iPhone\r\n<div>Venkat</div>\r\n</div>\r\n<div><br>\r\n</div>\r\n",
    "PostedDate": "2013-12-05T03:21:48.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1132327",
    "ThreadId": "471806",
    "Html": "I do almost the exact same thing, but I do not do not do my container registrations in the ViewModelLocator class.., but rather in my App constructor or another bootstrapper class.\r<br />\n<br />\nFor example, why would I have my registrations for ISomeService inside my ViewModelLocator class? ViewModelLocator should only ask the container to resolve the <strong>ViewModels</strong>_ that are used... not register the other services/classes....<br />\n",
    "PostedDate": "2013-12-05T14:38:17.3-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]