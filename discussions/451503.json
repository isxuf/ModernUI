[
  {
    "Id": "1073462",
    "ThreadId": "451503",
    "Html": "I have  a custom AutoCompleteBoxEx which derives from AutoCompleteBox (WPF Toolkit) and forces the text to upper case.\r<br />\nWhich I use it on a UserControl\r<br />\n<br />\n...\r<br />\n&lt;pcontrols:AutoCompleteComboEx .x:Name=&quot;Supplier&quot; &quot; ItemsSource=&quot;{Binding Suppliers}&quot; ...&gt;\r<br />\n<br />\nThe default combo theme style is not being used, is there any magical I need to do to utilise the default combox Mordern UI style.<br />\n",
    "PostedDate": "2013-07-26T06:08:11.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1073564",
    "ThreadId": "451503",
    "Html": "At the end of the day, you have to create your own style, but... If there's an existing style that's at least pretty close it could be fairly easy.  Here's an example of a CapText control, just enforces all letters be upper case.<br />\n<pre><code>Public Class CapText\n    Inherits TextBox\n    Private Sub CapText_TextChanged(sender As Object, e As TextChangedEventArgs) Handles Me.TextChanged\n        If Text &lt;&gt; UCase(Text) Then\n            Dim ss = SelectionStart\n            Dim sl = SelectionLength\n            Text = UCase(Text)\n            SelectionStart = ss\n            SelectionLength = sl\n        End If\n    End Sub\nEnd Class\n</code></pre>\n\nYou can do your styling on page or in loose xaml.  If you do a loose xaml file you'll have to merge it also when changing the style.\r<br />\n<br />\nHere's a page using that control:<br />\n<pre><code>&lt;UserControl\n             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; \n             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot; \n                         xmlns:mui=&quot;http://firstfloorsoftware.com/ModernUI&quot;\n             xmlns:local=&quot;clr-namespace:DemoAppMUI&quot; x:Class=&quot;CustomControl&quot; \n             mc:Ignorable=&quot;d&quot; \n             d:DesignHeight=&quot;300&quot; d:DesignWidth=&quot;300&quot;&gt;\n    &lt;UserControl.Resources&gt;\n        &lt;Style TargetType=&quot;{x:Type local:CapText}&quot;  BasedOn=&quot;{StaticResource {x:Type TextBoxBase}}&quot;  /&gt;\n    &lt;/UserControl.Resources&gt;\n    &lt;Grid&gt;\n\n        &lt;local:CapText HorizontalAlignment=&quot;Left&quot; Margin=&quot;55,43,0,0&quot; TextWrapping=&quot;Wrap&quot; Text=&quot;CapText&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;136&quot;/&gt;\n        &lt;local:CapText HorizontalAlignment=&quot;Left&quot; Margin=&quot;55,70,0,0&quot; TextWrapping=&quot;Wrap&quot; Text=&quot;CapText&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;136&quot;/&gt;\n        &lt;local:CapText HorizontalAlignment=&quot;Left&quot; Margin=&quot;55,97,0,0&quot; TextWrapping=&quot;Wrap&quot; Text=&quot;CapText&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;136&quot;/&gt;\n\n    &lt;/Grid&gt;\n&lt;/UserControl&gt;\n</code></pre>\n\n",
    "PostedDate": "2013-07-26T09:22:48.21-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1073775",
    "ThreadId": "451503",
    "Html": "I think what I'm trying to say, I have the AutocompleteCombox working fine, but it doesn't pick up the default ComboBox style from MUI.\r<br />\nIn fact this goes for any inherited controls that you create.\r<br />\n<br />\nFor example if you inherit from a TextBox call it TextBoxEx and then use it in your page.xaml the TextBoxEx doesn't pick up the style for the default MUI textbox.\r<br />\n<br />\nI know I can copy the style from Modern UI source code and use it locally i.e. in my resources.xaml file it works. But I feel this isn't the correct approach.<br />\n",
    "PostedDate": "2013-07-27T01:01:44.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1073843",
    "ThreadId": "451503",
    "Html": "If you create a new visual control you have to style it.  If you don't add new visual elements, you can base your new style off the existing control and be done.<br />\n<br />\nIf you are not visually changing a control an alternative would be to put it in a container.  Since all the visual components are standard controls, existing styling will work.<br />\n<pre><code>' You have to write a style\nClass MyCombo\n    Inherits ComboBox\n    ' Other Code\nEnd Class</code></pre>\n\n<pre><code>' you don't need a style\nClass MyCombo\n  Inherits Grid\n    Private _myCombo as New ComboBox\n    Sub New()\n        InitializeComponent()\n        Children.Add(_myCombo)\n    End Sub\n    ' Other Code\nEnd Class</code></pre>\n\n",
    "PostedDate": "2013-07-27T08:50:24.283-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1074268",
    "ThreadId": "451503",
    "Html": "I've manage to create a solution, seems the WPF Toolkit Autocompletecobox inherits from a Control, that was my first problem and then it was creative style got me this working....<br />\n<pre><code>&lt;Style x:Key=&quot;ComboBoxStyle&quot;  TargetType=&quot;controls:AutoCompleteComboEx&quot;&gt;\n    &lt;Setter Property=&quot;IsTabStop&quot; Value=&quot;False&quot; /&gt;\n    &lt;Setter Property=&quot;Padding&quot; Value=&quot;2&quot; /&gt;\n    &lt;Setter Property=&quot;BorderThickness&quot; Value=&quot;1&quot; /&gt;\n    &lt;Setter Property=&quot;BorderBrush&quot; Value=&quot;{DynamicResource InputBorder}&quot;/&gt;\n    &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{DynamicResource InputText}&quot;/&gt;\n    &lt;Setter Property=&quot;Background&quot; Value=&quot;{DynamicResource InputBackground}&quot;/&gt;\n    &lt;Setter Property=&quot;MinWidth&quot; Value=&quot;45&quot; /&gt;\n    &lt;Setter Property=&quot;Template&quot;&gt;\n        &lt;Setter.Value&gt;\n\n\n            &lt;ControlTemplate TargetType=&quot;controls:AutoCompleteComboEx&quot;&gt;\n                &lt;Grid Opacity=&quot;{TemplateBinding Opacity}&quot;&gt;\n                    &lt;TextBox Padding=&quot;0&quot; Background=&quot;{TemplateBinding Background}&quot; IsTabStop=&quot;True&quot; x:Name=&quot;Text&quot; BorderThickness=&quot;{TemplateBinding BorderThickness}&quot; BorderBrush=&quot;{TemplateBinding BorderBrush}&quot; Foreground=&quot;{DynamicResource InputText}&quot; Margin=&quot;0&quot; /&gt;\n                    &lt;Popup x:Name=&quot;Popup&quot;&gt;\n                        &lt;Grid Opacity=&quot;{TemplateBinding Opacity}&quot;&gt;\n                            &lt;Border x:Name=&quot;PopupBorder&quot; HorizontalAlignment=&quot;Stretch&quot; BorderThickness=&quot;0&quot; Background=&quot;{DynamicResource InputBackground}&quot; &gt;\n                                &lt;Border.RenderTransform&gt;\n                                    &lt;TranslateTransform X=&quot;1&quot; Y=&quot;1&quot; /&gt;\n                                &lt;/Border.RenderTransform&gt;\n                                &lt;Border HorizontalAlignment=&quot;Stretch&quot; Opacity=&quot;1.0&quot; Padding=&quot;0&quot; Background=&quot;{DynamicResource InputBackground}&quot; BorderThickness=&quot;{TemplateBinding BorderThickness}&quot; BorderBrush=&quot;{TemplateBinding BorderBrush}&quot; CornerRadius=&quot;0&quot;&gt;\n                                    &lt;Border.RenderTransform&gt;\n                                        &lt;TransformGroup&gt;\n                                            &lt;TranslateTransform X=&quot;-1&quot; Y=&quot;-1&quot; /&gt;\n                                        &lt;/TransformGroup&gt;\n                                    &lt;/Border.RenderTransform&gt;\n                                    &lt;ListBox x:Name=&quot;Selector&quot; ScrollViewer.HorizontalScrollBarVisibility=&quot;Auto&quot; ScrollViewer.VerticalScrollBarVisibility=&quot;Auto&quot; ItemContainerStyle=&quot;{TemplateBinding ItemContainerStyle}&quot; Background=&quot;{DynamicResource InputBackground}&quot; Foreground=&quot;{DynamicResource InputText}&quot; BorderThickness=&quot;0&quot; ItemTemplate=&quot;{TemplateBinding ItemTemplate}&quot; /&gt;\n                                &lt;/Border&gt;\n                            &lt;/Border&gt;\n                        &lt;/Grid&gt;\n                    &lt;/Popup&gt;\n                &lt;/Grid&gt;\n            &lt;/ControlTemplate&gt;\n        &lt;/Setter.Value&gt;\n    &lt;/Setter&gt;\n&lt;/Style&gt;</code></pre>\n\n",
    "PostedDate": "2013-07-29T03:40:00.263-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]